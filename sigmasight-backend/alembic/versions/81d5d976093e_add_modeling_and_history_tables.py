"""Add modeling and history tables

Revision ID: 81d5d976093e
Revises: 001
Create Date: 2025-07-15 18:55:32.812927

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '81d5d976093e'
down_revision: Union[str, Sequence[str], None] = '001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('export_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('export_type', sa.String(length=50), nullable=False, comment='Type of export: portfolio, trades, modeling_session'),
    sa.Column('export_format', sa.String(length=10), nullable=False, comment='Format: csv, json, fix'),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('file_size_bytes', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.CheckConstraint("export_format IN ('csv', 'json', 'fix')", name=op.f('ck_export_history_export_format_check')),
    sa.CheckConstraint("export_type IN ('portfolio', 'trades', 'modeling_session')", name=op.f('ck_export_history_export_type_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_export_history_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_export_history'))
    )
    op.create_index(op.f('ix_export_history_user_id'), 'export_history', ['user_id'], unique=False)
    op.create_table('modeling_session_snapshots',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('base_portfolio_snapshot', sa.JSON(), nullable=False, comment='Original portfolio state before modifications'),
    sa.Column('modified_portfolio_snapshot', sa.JSON(), nullable=True, comment='Portfolio state after applying changes'),
    sa.Column('changes', sa.JSON(), nullable=True, comment='Array of position changes (add/remove/modify)'),
    sa.Column('impact_summary', sa.JSON(), nullable=True, comment='Summary of impacts on risk, exposure, P&L'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("status IN ('active', 'completed', 'cancelled')", name=op.f('ck_modeling_session_snapshots_modeling_session_status_check')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_modeling_session_snapshots_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_modeling_session_snapshots'))
    )
    op.create_index('idx_active_sessions', 'modeling_session_snapshots', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_modeling_session_snapshots_session_id'), 'modeling_session_snapshots', ['session_id'], unique=True)
    op.create_table('historical_backfill_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('portfolio_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, processing, completed, failed'),
    sa.Column('total_symbols', sa.Integer(), nullable=False, comment='Total number of unique symbols to fetch'),
    sa.Column('processed_symbols', sa.Integer(), nullable=False, comment='Number of symbols successfully processed'),
    sa.Column('failed_symbols', sa.Integer(), nullable=False, comment='Number of symbols that failed to fetch'),
    sa.Column('last_error', sa.Text(), nullable=True, comment='Last error message if any'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='When backfill completed (success or failure)'),
    sa.CheckConstraint("status IN ('pending', 'processing', 'completed', 'failed')", name=op.f('ck_historical_backfill_progress_backfill_status_check')),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], name=op.f('fk_historical_backfill_progress_portfolio_id_portfolios'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_historical_backfill_progress')),
    sa.UniqueConstraint('portfolio_id', name=op.f('uq_historical_backfill_progress_portfolio_id'))
    )
    op.alter_column('market_data_cache', 'volume',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_constraint(op.f('uq_users_email'), 'users', type_='unique')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_unique_constraint(op.f('uq_users_email'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('market_data_cache', 'volume',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.drop_table('historical_backfill_progress')
    op.drop_index(op.f('ix_modeling_session_snapshots_session_id'), table_name='modeling_session_snapshots')
    op.drop_index('idx_active_sessions', table_name='modeling_session_snapshots')
    op.drop_table('modeling_session_snapshots')
    op.drop_index(op.f('ix_export_history_user_id'), table_name='export_history')
    op.drop_table('export_history')
    # ### end Alembic commands ###
