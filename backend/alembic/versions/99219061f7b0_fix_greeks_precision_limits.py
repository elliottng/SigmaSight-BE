"""fix_greeks_precision_limits

Revision ID: 99219061f7b0
Revises: 580582693ef8
Create Date: 2025-08-07 21:17:36.973337

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '99219061f7b0'
down_revision: Union[str, Sequence[str], None] = '580582693ef8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fund_holdings',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('fund_symbol', sa.String(length=20), nullable=False),
    sa.Column('holding_symbol', sa.String(length=20), nullable=False),
    sa.Column('holding_name', sa.String(length=200), nullable=True),
    sa.Column('weight', sa.Numeric(precision=8, scale=6), nullable=False),
    sa.Column('shares', sa.Integer(), nullable=True),
    sa.Column('market_value', sa.Numeric(precision=16, scale=2), nullable=True),
    sa.Column('data_source', sa.String(length=50), nullable=False),
    sa.Column('last_updated', sa.Date(), nullable=False),
    sa.Column('data_quality', sa.String(length=20), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_fund_holdings')),
    sa.UniqueConstraint('fund_symbol', 'holding_symbol', 'last_updated', name='uq_fund_holdings_fund_holding_date')
    )
    op.create_index('ix_fund_holdings_data_source', 'fund_holdings', ['data_source'], unique=False)
    op.create_index('ix_fund_holdings_fund_date', 'fund_holdings', ['fund_symbol', 'last_updated'], unique=False)
    op.create_index('ix_fund_holdings_fund_symbol', 'fund_holdings', ['fund_symbol'], unique=False)
    op.create_index('ix_fund_holdings_holding_symbol', 'fund_holdings', ['holding_symbol'], unique=False)
    op.create_index('ix_fund_holdings_last_updated', 'fund_holdings', ['last_updated'], unique=False)
    op.create_table('factor_correlations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('factor_1_id', sa.UUID(), nullable=False),
    sa.Column('factor_2_id', sa.UUID(), nullable=False),
    sa.Column('correlation', sa.Numeric(precision=8, scale=6), nullable=False),
    sa.Column('calculation_date', sa.Date(), nullable=False),
    sa.Column('lookback_days', sa.Integer(), nullable=False),
    sa.Column('decay_factor', sa.Numeric(precision=4, scale=3), nullable=False),
    sa.Column('data_points', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['factor_1_id'], ['factor_definitions.id'], name=op.f('fk_factor_correlations_factor_1_id_factor_definitions')),
    sa.ForeignKeyConstraint(['factor_2_id'], ['factor_definitions.id'], name=op.f('fk_factor_correlations_factor_2_id_factor_definitions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_factor_correlations')),
    sa.UniqueConstraint('factor_1_id', 'factor_2_id', 'calculation_date', name='uq_factor_correlations_factors_date')
    )
    op.create_index('idx_factor_correlations_date', 'factor_correlations', ['calculation_date'], unique=False)
    op.create_index('idx_factor_correlations_factors', 'factor_correlations', ['factor_1_id', 'factor_2_id'], unique=False)
    op.drop_table('historical_backfill_progress')
    op.alter_column('market_data_cache', 'data_source',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('position_greeks', 'delta',
               existing_type=sa.NUMERIC(precision=8, scale=6),
               type_=sa.Numeric(precision=12, scale=6),
               existing_nullable=True)
    op.alter_column('position_greeks', 'gamma',
               existing_type=sa.NUMERIC(precision=8, scale=6),
               type_=sa.Numeric(precision=12, scale=6),
               existing_nullable=True)
    op.create_index('idx_stress_results_calculation_date', 'stress_test_results', ['calculation_date'], unique=False)
    op.create_index('idx_stress_results_scenario', 'stress_test_results', ['scenario_id'], unique=False)
    op.alter_column('stress_test_scenarios', 'active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_index('idx_stress_scenarios_active', 'stress_test_scenarios', ['active'], unique=False)
    op.create_index('idx_stress_scenarios_severity', 'stress_test_scenarios', ['severity'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_stress_scenarios_severity', table_name='stress_test_scenarios')
    op.drop_index('idx_stress_scenarios_active', table_name='stress_test_scenarios')
    op.alter_column('stress_test_scenarios', 'active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_index('idx_stress_results_scenario', table_name='stress_test_results')
    op.drop_index('idx_stress_results_calculation_date', table_name='stress_test_results')
    op.alter_column('position_greeks', 'gamma',
               existing_type=sa.Numeric(precision=12, scale=6),
               type_=sa.NUMERIC(precision=8, scale=6),
               existing_nullable=True)
    op.alter_column('position_greeks', 'delta',
               existing_type=sa.Numeric(precision=12, scale=6),
               type_=sa.NUMERIC(precision=8, scale=6),
               existing_nullable=True)
    op.alter_column('market_data_cache', 'data_source',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.create_table('historical_backfill_progress',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('portfolio_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False, comment='Status: pending, processing, completed, failed'),
    sa.Column('total_symbols', sa.INTEGER(), autoincrement=False, nullable=False, comment='Total number of unique symbols to fetch'),
    sa.Column('processed_symbols', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of symbols successfully processed'),
    sa.Column('failed_symbols', sa.INTEGER(), autoincrement=False, nullable=False, comment='Number of symbols that failed to fetch'),
    sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True, comment='Last error message if any'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True, comment='When backfill completed (success or failure)'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying]::text[])", name=op.f('ck_historical_backfill_progress_backfill_status_check')),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], name=op.f('fk_historical_backfill_progress_portfolio_id_portfolios'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_historical_backfill_progress')),
    sa.UniqueConstraint('portfolio_id', name=op.f('uq_historical_backfill_progress_portfolio_id'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_index('idx_factor_correlations_factors', table_name='factor_correlations')
    op.drop_index('idx_factor_correlations_date', table_name='factor_correlations')
    op.drop_table('factor_correlations')
    op.drop_index('ix_fund_holdings_last_updated', table_name='fund_holdings')
    op.drop_index('ix_fund_holdings_holding_symbol', table_name='fund_holdings')
    op.drop_index('ix_fund_holdings_fund_symbol', table_name='fund_holdings')
    op.drop_index('ix_fund_holdings_fund_date', table_name='fund_holdings')
    op.drop_index('ix_fund_holdings_data_source', table_name='fund_holdings')
    op.drop_table('fund_holdings')
    # ### end Alembic commands ###
